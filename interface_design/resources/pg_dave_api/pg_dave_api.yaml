swagger: '2.0'
info:
  version: 0.0.10
  title: PG-Dave Mock API
host: '127.0.0.1:9090'
basePath: /api
tags:
  - name: HistoricData
  - name: DataMining
consumes:
  - application/json
produces:
  - application/json
paths:
  '/data/smgw/{topic}':
    get:
      tags:
        - HistoricData
      description: Get status about pending requests for Smart Meter data by target topic
      summary: Get status about pending requests for Smart Meter data by target topic
      parameters:
        - name: topic
          type: string
          in: path
          required: true
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/TopicStatusResponse'
        '400':
          description: 'Missing or invalid payload, see response for details'
          schema:
            $ref: '#/definitions/BaseErrorResponse'
  /data/smgws/:
    post:
      tags:
        - HistoricData
      description: >
        Returns previously saved raw Smart Meter data. Optionally a set of Smart
        Meter IDs can be specified. The parameters 'from' and 'to' can also be
        set optionally to specify a time period. If 'from' and 'to' are not set,
        the complete saved history will be returned. If either only 'from' or
        'to' is set, the returned values are located either within the time
        period [#OLDEST, 'to'] or ['from', #NOW].
      summary: >-
        Get historic Smart Meter data by a given set of Smart Meter IDs and a
        target time period
      operationId: getSmartMeterDataByIds
      parameters:
        - name: smdata
          in: body
          required: true
          schema:
            $ref: '#/definitions/SmartMeterDataRequest'
      responses:
        '200':
          description: >-
            The requested data will be published via the specified broker at the
            uri to the topic
          schema:
            type: array
            items:
              $ref: '#/definitions/TopicResponse'
        '400':
          description: 'Missing or invalid payload, see response for details'
          schema:
            $ref: '#/definitions/BaseErrorResponse'
        default:
          description: 'Unexpected error, see response for details'
          schema:
            $ref: '#/definitions/BaseErrorResponse'
  /data/weather/nearestWeatherStations/:
    get:
      tags:
        - HistoricData
      description: >-
        Get the weather station nearest to the given corrdinates and within an
        optionally given radius. If the radius is specified the response list
        constains the all wheater stations within the radius ordered by the
        ascending distance to the coordinate.
      summary: Get a list of the nearest weather stations of a given coordinate
      operationId: getnearestWeatherStationsByCoor
      parameters:
        - in: body
          name: coordinate
          required: true
          schema:
            $ref: '#/definitions/NearestWeatherStationRequest'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/WeatherStationDataResponse'
        '400':
          description: 'Missing or invalid payload, see response for details'
          schema:
            $ref: '#/definitions/BaseErrorResponse'
  '/data/weather/{topic}':
    get:
      tags:
        - HistoricData
      description: Get status about pending requests for weather data by target topic
      summary: Get status about pending requests for weather data by target topic
      parameters:
        - name: topic
          type: string
          in: path
          required: true
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/TopicStatusResponse'
        '400':
          description: 'Missing or invalid payload, see response for details'
          schema:
            $ref: '#/definitions/BaseErrorResponse'
  /data/weather/climate/:
    post:
      tags:
        - HistoricData
      description: >
        Returns climate data for a required coordinate and an optionally
        specified time period. Each data record contatins the average values for
        one day
      summary: Get historic climate data by corrdinate and time period
      operationId: getClimateDataByGeo
      parameters:
        - name: clirequest
          in: body
          required: true
          schema:
            $ref: '#/definitions/WeatherDataRequest'
      responses:
        '200':
          description: Array of weather station data.
          schema:
            $ref: '#/definitions/TopicWeatherResponse'
        '400':
          description: 'Missing or invalid payload, see response for details'
          schema:
            $ref: '#/definitions/BaseErrorResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/BaseErrorResponse'
  /data/weather/sun/:
    post:
      tags:
        - HistoricData
      description: >
        Returns sun radiation data for a required coordinate and an optionally
        specified time period
      summary: Get historic sun radiation data by corrdinate and time period
      operationId: getSunRadiationDataByGeo
      parameters:
        - name: srarequest
          in: body
          required: true
          schema:
            $ref: '#/definitions/WeatherDataRequest'
      responses:
        '200':
          description: Array of weather station data.
          schema:
            $ref: '#/definitions/TopicWeatherResponse'
        '400':
          description: 'Missing or invalid payload, see response for details'
          schema:
            $ref: '#/definitions/BaseErrorResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/BaseErrorResponse'
  /data/weather/wind/:
    post:
      tags:
        - HistoricData
      description: >
        Returns wind data for a required coordinate and an optionally specified
        time period
      summary: Get historic wind radiation data by corrdinate and time period
      operationId: getWindDataByGeo
      parameters:
        - name: wirequest
          in: body
          required: true
          schema:
            $ref: '#/definitions/WeatherDataRequest'
      responses:
        '200':
          description: Array of weather station data.
          schema:
            $ref: '#/definitions/TopicWeatherResponse'
        '400':
          description: 'Missing or invalid payload, see response for details'
          schema:
            $ref: '#/definitions/BaseErrorResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/BaseErrorResponse'
  /datamining/models/:
    get:
      tags:
        - DataMining
      description: Get all PMML models that DAvE offer
      summary: Get all PMML models that DAvE offer
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/ModelsResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/BaseErrorResponse'
  '/datamining/latests/{modelid}':
    get:
      tags:
        - DataMining
      description: |
        Returns latest build PMML model by a given modelId.
      summary: Get latest PMML by Id
      operationId: getLatestMiningModelById
      parameters:
        - in: path
          name: modelid
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/PmmlModelResponse'
        '204':
          description: >-
            There is no latest Mining Model (PMML) for the requested
            specification.
        '400':
          description: Missing or invalid payload
          schema:
            $ref: '#/definitions/BaseErrorResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/BaseErrorResponse'
  /datamining/latests/:
    post:
      tags:
        - DataMining
      description: |
        Returns latest PMML model for a given mining model specification.
      summary: Get latest PMML
      operationId: getLatestMiningModelByPMML
      parameters:
        - in: body
          name: pmml
          required: true
          schema:
            $ref: '#/definitions/PmmlModelRequest'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/TopicResponse'
        '204':
          description: There is no latest model for the requested specification.
        '400':
          description: Missing or invalid payload
          schema:
            $ref: '#/definitions/BaseErrorResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/BaseErrorResponse'
  '/datamining/submission/{topic}':
    get:
      tags:
        - DataMining
      description: Get status about pending requests for PMML model by target topic
      summary: Get status about pending requests for PMML model by target topic
      operationId: getSubmissionStatusByTopic
      parameters:
        - in: path
          name: topic
          type: string
          required: true
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/TopicStatusResponse'
        '400':
          description: 'Missing or invalid payload, see response for details'
          schema:
            $ref: '#/definitions/BaseErrorResponse'
  /datamining/submission/:
    post:
      tags:
        - DataMining
      description: >
        Request a new PMML model with results matching the passed model
        specification. After building a valid requested model it will be
        published on the message broker at the topic provided in the response
      summary: Request to build a PMML model by specifications
      operationId: createDataMiningAnalysis
      parameters:
        - in: body
          name: pmml
          required: true
          schema:
            $ref: '#/definitions/PmmlModelRequest'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/TopicResponse'
        '400':
          description: Missing or invalid payload
          schema:
            $ref: '#/definitions/BaseErrorResponse'
        '501':
          description: Model not implemented
          schema:
            $ref: '#/definitions/BaseErrorResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/BaseErrorResponse'
definitions:
  TopicStatusEnum:
    description: ''
    type: string
    enum:
      - RUNNING
      - SUCCESS
      - FAILURE
  Coordinate:
    type: object
    properties:
      lon:
        type: number
        format: double
        description: The longitude component of a geographic coordinate
        example: 53.14118
      lat:
        type: number
        format: double
        description: The latitude component of a geographic coordinate
        example: 8.21467
  SmartMeterRawData:
    type: object
    properties:
      device:
        type: string
        description: The Smart Meter ID which is globally unique.
        example: sm_752b370b-8e33-43e9-aec1-0b764ec00561
      attribute:
        type: object
        properties:
          status:
            type: string
          scaler:
            type: integer
            format: int32
          capture_time:
            type: integer
            format: int64
          unit:
            type: integer
          value:
            type: number
            format: float
  ClimateRawData:
    type: object
    properties:
      stationsId:
        type: string
      messDatum:
        type: integer
        format: int64
        description: Date and time as unix epoch time
      qn_3:
        type: integer
        description: Quality 1 - 10
      fx:
        type: number
        format: double
        description: Maximum daily wind peak
      fm:
        type: number
        format: double
        description: Daily minimum wind speed
      qn_4:
        type: integer
        format: int32
        description: Quality 1 - 10
      rsk:
        type: integer
        format: int32
        description: Daily rainfall
      rskf:
        type: integer
        format: int32
        description: Precipitation
      sdk:
        type: number
        format: double
        description: Daily sunshine duration
      shk_tag:
        type: number
        format: double
        description: Daily snow depth
      nm:
        type: number
        format: double
        description: Daily average of the degree of coverage
      vpm:
        type: number
        format: double
        description: Daily average of the vapor pressure
      pm:
        type: number
        format: double
        description: Daily average of the atmospheric pressure
      tmk:
        type: number
        description: >-
          Average temperature for all measuring station corresponding to the
          coordinate.
        format: float
      upm:
        type: number
        format: double
        description: Daily average relative humidity
      txk:
        type: number
        format: double
        description: Daily maximum of the air temperature
      tnk:
        type: number
        format: double
        description: Daily minimum of the air temperature
      tgk:
        type: number
        format: double
        description: Minimum of air temperature at the ground
      eor:
        description: End of Record
        
  SolarRaditionRawData:
    type: object
    properties:
      stationsId:
        type: string
      messDatum:
        type: integer
        format: int64
        description: Date and time as unix epoch time
      qn_7:
        type: string
      sd_so:
        type: string
      eor:
        description: End of Record (Aufzeichungsende)
  WindRawData:
    type: object
    properties:
      stationsId:
        type: string
      messDatum:
        type: integer
        format: int64
        description: Date and time as unix epoch time
      d:
        type: string
      f:
        type: string
      qn_3:
        type: string
      eor:
        description: End of Record (Aufzeichungsende)
    
  PmmlModelRequest:
    type: object
    description: PMML model as base64 encoded json object
    properties:
      broker:
        type: string
        example: kafka
      pmml:
        type: string
  NearestWeatherStationRequest:
    description: ''
    type: object
    required:
      - coor
    properties:
      coor:
        $ref: '#/definitions/Coordinate'
      radius:
        type: number
        format: float
        example: 40
        default: -1
        description: Radius in km
  WeatherDataRequest:
    type: object
    required:
      - broker
    properties:
      broker:
        type: string
        example: Kafka
      from:
        description: Timestamp Epoch and default is -1 indicating no start date
        type: integer
        format: int64
        default: -1
        example: 6340009
      to:
        description: Timestamp Epoch and default is -1 indicating no end date
        type: integer
        format: int64
        default: '-1'
        example: '79012323'
      coordinates:
        $ref: '#/definitions/Coordinate'
  SmartMeterDataRequest:
    type: object
    required:
      - broker
    properties:
      broker:
        type: string
        example: Kafka
      from:
        description: Timestamp Epoch and default is -1 indicating no start date
        type: integer
        format: int64
        default: '-1'
        example: '6340009'
      to:
        description: Timestamp Epoch and default is -1 indicating no end date
        type: integer
        format: int64
        default: '-1'
        example: '79012323'
      devices:
        description: >-
          A list of a Smart Meter Gateways IDs with corresponding Smart Meter
          IDs.
        type: array
        items:
          type: string
        example:
          - sm_752b370b-8e33-43e9-aec1-0b764ec00561
          - sm_5fdf2caf-c2dd-4981-8e71-a6f87393f108
          - sm_38e3e715-0e70-4585-8bc8-bfa9a82e32f7
  BaseErrorResponse:
    type: object
    properties:
      timestamp:
        type: integer
        format: int64
        description: Date and time as unix epoch time
      status:
        type: integer
        format: int32
      error:
        type: string
      exception:
        type: string
      message:
        type: string
      path:
        type: string
  TopicWeatherResponse:
    description: get topic with uri
    type: object
    properties:
      uri:
        type: string
        example: 'localhost:12345'
      topic:
        type: string
        example: 9bd2380a-1b30-4d89-85b1-139322bec43e
      station:
        $ref: '#/definitions/WeatherStationDataResponse'
  TopicStatusResponse:
    description: ''
    type: object
    properties:
      status:
        $ref: '#/definitions/TopicStatusEnum'
  TopicResponse:
    description: get topic with uri
    type: object
    properties:
      uri:
        type: string
        example: 'localhost:12345'
      topic:
        type: string
        example: 9bd2380a-1b30-4d89-85b1-139322bec43e
  WeatherStationDataResponse:
    type: array
    items:
      type: object
      properties:
        stationId:
          type: string
        name:
          type: string
        coor:
          $ref: '#/definitions/Coordinate'
        alt:
          type: number
          format: int64
        state:
          type: string
  PmmlModelResponse:
    type: object
    description: PMML model as base64 encoded json object
    properties:
      pmml:
        type: string
  ModelsResponse:
    description: Which Models offer DAvE
    type: array
    items:
      type: object
      properties:
        modelId:
          type: integer
          example: 1
        name:
          type: string
          example: Support Vector Machine
        discription:
          type: string
          example: Forecast model for power consumption
        lastbuild:
          type: integer
          format: int64
          description: Date and time as unix epoch time
          example: 1413958770

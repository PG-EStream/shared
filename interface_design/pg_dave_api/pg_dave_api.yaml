swagger: '2.0'
info:
  version: 0.0.1
  title: PG-Dave Mock API
host: '127.0.0.1:9090'
basePath: /api
tags:
- name: "HistoricData"
- name: "DataMining"
consumes:
  - application/json
produces:
  - application/json
paths:
  /data/smgws/:
    post:
      tags:
        - "HistoricData"
      description: |
        Returns previously saved raw smart meter data specificed by a given set of Smart Meter Gateway IDS and corresponding Smart Meter IDs to uniquely define them. The parameters 'from' and 'to' can be set to specify a time interval. If 'from' and 'to' are not set, the complete saved history will be returned. If either only 'from' or 'to' is set, the returned values are located either within the time interval [#OLDEST, 'to'] or ['from', #NOW].
      summary: Get historic Smart Meter Data by a given set of Smart Meter Gateway IDs and corresponding Smart Meter IDs
      operationId: getSmartMeterDataByIds
      parameters:
        - name: smdata
          in: body
          required: true
          schema:
            $ref: '#/definitions/SmartMeterDataRequest'
      responses:
        '200':
          description: Array of raw historic Smart Meter data.
          schema:
            type: array
            items:
              $ref: '#/definitions/SmartMeterRawData'
        '400':
          description: Missing or invalid payload
          schema:
            $ref: '#/definitions/BaseErrorResponse'
            
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/BaseErrorResponse'
              
  /data/weather/:
    post:
      tags:
        - "HistoricData"
      description: |
        Returns historic weather data for a specified time interval and a set of locations.
      summary: Get historic weather data by time and locations.
      operationId: getWeatherDataByGeo
      parameters:
        - name: wdrequest
          in: body
          required: true
          schema:
            $ref: '#/definitions/WeatherDataRequest'
      responses:
        '200':
          description: Array of historic weather data.
          schema:
            type: array
            items:
              $ref: '#/definitions/WeatherData'
              
        '400':
          description: Missing or invalid payload
          schema:
            $ref: '#/definitions/BaseErrorResponse'  
            
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/BaseErrorResponse'
                
  /datamining/latests/:
    #For a RESTful Api this should be a get method, but we need to send a body containing our pmml, change path?
    post:
      tags:
        - "DataMining"
      description: |
        Returns latest PMML with results for a given mining model specification.
      summary: Get latest PMML
      operationId: getLatestMiningModelBySpec
      parameters:
        - name: pmml
          in: body
          required: true
          description: The pmml specification determining what mining algorithm should be used on which data among other things.
          schema:
            $ref: '#/definitions/PMML'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/PMML'

        '204':
          description: There is no latest Mining Model (PMML) for the requested specification.
          
        '400':
          description: Missing or invalid payload
          schema:
            $ref: '#/definitions/BaseErrorResponse'
              
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/BaseErrorResponse'
          
  /datamining/commissions/:    
    post:
      tags:
        - "DataMining"
      description: |
        "Asynchronously" request a new PMML model with results matching the passed model specification. The analyzed values based on historic data are send to the committed kafka connector in PMML format.
      summary: Request to analyze a new specific Mining Model on historic data.
      operationId: createDataMiningAnalysis
      parameters:
        - name: dataminingrequest
          in: body
          required: true
          description: The pmml specification determining what mining algorithm should be used on which data among other things.
          schema:
            $ref: '#/definitions/DataMiningRequest'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/DataMiningStatus'
          
        '400':
          description: Missing or invalid payload
          schema:
            $ref: '#/definitions/BaseErrorResponse'
              
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/BaseErrorResponse'   
          
                  
definitions:
  PMML:
    type: object
    description: Replace with JPMML classes in code
    
  #Should be possible to combine multiple Swagger files so we do not need to define this in multiple files (e.g. KafkaConnector, ConnectionType).
  KafkaConnector:
    description: >-
      Kafka Connector to stream, filter, and transform data from a given DataSource to
      Kafka or vice versa.
    type: object
    required:
      - sinkUrl
      - connectorType
    properties:
      name:
        type: string
        example: test-connector
      sinkUrl:
        type: string
        description: Address of the data source
        example: 'http://localhost:9000'
      connectorType:
        type: string
        description: Kafka Connector Type
        enum:
          - hdfs
          - jdbc
      connectorProperties:
        type: array
        description: Properties for the data source which will receive the data.
        items:
          type: string
      connectionType:
        $ref: '#/definitions/ConnectionType'
      connectorStatus:
        type: string
        enum:
          - UNASSIGNED
          - RUNNING
          - PAUSED
          - FAILED    

  ConnectionType:
    type: object
    description: >-
      This determines whether a connection to the raw data or aggregated
      data is provided
    required:
      - dataFormat
    properties:
      dataFormat:
        type: string
        description: >-
          Data format specifies whether the data stream should output the data
          as is or whether it should process the data by a given model. In the
          case of the latter, a modelId is required.
        enum:
          - raw
          - processed
      modelId:
        type: integer
    
  DataMiningRequest:
    type: object
    properties:
      from:
        type: integer	
        format: int64
      to: 
        type: integer	
        format: int64
      kafka_connector:
        $ref: '#/definitions/KafkaConnector'      
      PMML:
        $ref: '#/definitions/PMML'
        
  DataMiningStatus:
    type: object
    properties:
      status:
        type: string
        enum:
          - ERROR
          - RUNNING
          - DONE
    
  Coordinate:
    type: object
    properties:
      lon:
        type: number
        format: double
        description: The longitude component of a geographic coordinate
        example: 53.1411800
      lat:
        type: number
        format: double
        description: The latitude component of a geographic coordinate
        example: 8.2146700
      

  WeatherDataRequest:
    type: object
    required:
      - coordinates
    properties:
      from:
        type: integer	
        format: int64
      to: 
        type: integer	
        format: int64
      coordinates:
        type: array
        items:
          $ref: '#/definitions/Coordinate'

  SmartMeterDataRequest:
    type: object
    required:
      - devices
    properties:
      from:
        type: integer	
        format: int64
      to: 
        type: integer	
        format: int64
      devices:
        description: A list of a Smart Meter Gateways IDs with corresponding Smart Meter IDs.
        type: array
        items:
          type: object
          required:
            - smgw_device_name
          properties:
            smgw_device_name:
              type: string
              example: smgw_01
            sm_devices:
              type: array
              items:
                type: string
              example: [sm_01, sm_02, sm_03]
     
        
  SmartMeterRawData:
    type: object
    required:
      - logical_name
      - smgw_device_name
    properties:
      smgw_device_name:
        type: string
        description: The unique Smart Meter Gateway device name which acts as an ID.
        example: smgw_01
      logical_name:
        type: string
        description: The Smart Meter Gateway ID which is globally unique with the smgw_device_name.
        example: sm_01
      value:
        type: number
        format: double
        description: Value of Smart Meter relating to the capture time.
        example: 3.42126
      capture_time:
        type: integer
        description: The time the data was measured.
        format: int64
      scaler:
        type: integer
        description: TODO
        format: int32
      unit:
        type: integer
        description: TODO
        format: int32
      status:
        description: TODO
        type: string
    
        
  WeatherData:
    type: object
    properties:
      capture_time:
        type: integer
        format: int64
        description: Date and time as unix epoch time
      coordinate:
        $ref: '#/definitions/Coordinate'
      temperature:
        type: number
        description: Average temperature for all measuring station corresponding to the coordinate.
        format: float
      global_radiation:
        type: number
        description: Global radiation from the sky which was falling onto the horizontal surface on the ground correspoding to the coordinate. Including the direct solar radiation and the diffuse radiation in watt per square meter (W/m²)
        format: double
      wind_speed: 
        type: number
        format: float
        description: Wind speed in m/s
      wind_direction: 
        type: number
        format: float
        description: Wind direction in degrees (meteorological) e.g. 348.75 <= North <= 11.25
      cloud_type:
        #https://de.wikipedia.org/wiki/Bew%C3%B6lkung#Einteilung_der_CIE
        type: string
        description: Cloudiness classification of CIE
        enum:
        - All
        - sunny sky
        - clear sky
        - partly cloudy sky
        - cloudy sky
        - overcast sky
      cloud_value: 
        type: number
        description: Cloudiness in percentage        
        format: float
    
        
  BaseErrorResponse:
    type: object
    properties:
      timestamp:
        type: integer
        format: int64
        description: Date and time as unix epoch time  
      status:
        type: integer
        format: int32
      error:
        type: string
      exception:
        type: string
      message:
        type: string
      path:
        type: string
   
        
#  From:
#    type: integer	
#    format: int64
#    description: Start of a time interval as unix epoch time
    
    
#  To:
#    type: integer	
#    format: int64
#    description: End of a time interval as unix epoch time
      